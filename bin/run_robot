#!/usr/bin/env ruby
# frozen_string_literal: true

#
# Will run one robot as specified, either for a druid or a file containing one druid per line
#
# To run With Options
# Options must be placed AFTER workflow and robot name
# robot_root$ ./bin/run_robot PreservationIngest::TransferObject -e test -d druid:aa12bb1234
require 'bundler/setup'
require 'slop'

slop = Slop.parse do |o|
  o.banner = 'Usage: ./bin/run_robot class_name [options]'
  o.string '-e', '--environment', 'Environment to run in (i.e. test, production). Defaults to development', default: 'development'
  o.string '-d', '--druid', 'One druid to run the robot with', required: true
  o.string '-f', '--file', 'One file containing a druid per line'
  o.on '--help' do
    puts o
    exit
  end
end

ARGV.replace slop.arguments

robot = ARGV.shift
opts = slop.to_h

ENV['ROBOT_ENVIRONMENT'] = opts[:environment] unless opts[:environment].nil?
require File.expand_path("#{File.dirname(__FILE__)}/../config/boot")

# instantiate a Robot object using the name
klazz = robot.split('::').inject(Robots::SdrRepo) { |o, c| o.const_get c }
bot = klazz.new
bot.check_queued_status = false # skipping the queued workflow status check

druids = if opts[:file]
           File.readlines(opts[:file]).map(&:strip)
         else
           [opts[:druid]]
         end

druids.each do |druid|
  # the step must be queued, otherwise the run robot step will fail
  #
  # WorkflowClientFactory.build.update_status(druid: druid, workflow: workflow, process: process, status: 'queued')
  #
  # The above line was commented-out due to the fact that the robot name does
  # not reveal workflow and process information. This code has been here for
  # years, and this script wasn't even working, so I'm content to leave this as
  # is since it now at least achieves parity with common-accessioning's
  # implementation of bin/run_robot
  bot.perform druid
end
